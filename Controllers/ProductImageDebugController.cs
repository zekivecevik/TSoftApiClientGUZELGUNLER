using Microsoft.AspNetCore.Mvc;
using TSoftApiClient.Services;
using System.Text.Json;

namespace TSoftApiClient.Controllers
{
    [Route("ProductImageDebug")]
    public class ProductImageDebugController : Controller
    {
        private readonly TSoftApiService _tsoftService;
        private readonly ILogger<ProductImageDebugController> _logger;

        public ProductImageDebugController(
            TSoftApiService tsoftService,
            ILogger<ProductImageDebugController> logger)
        {
            _tsoftService = tsoftService;
            _logger = logger;
        }

        public async Task<IActionResult> Index()
        {
            var logs = new List<string>();

            try
            {
                logs.Add("üîç PRODUCT IMAGE DEBUG - BA≈ûLANGIƒå");
                logs.Add("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
                logs.Add("");

                // 1. ƒ∞lk √ºr√ºn√º al
                logs.Add("üì¶ STEP 1: ƒ∞lk √ºr√ºn√º getiriyoruz...");
                var productsResult = await _tsoftService.GetProductsAsync(limit: 1);

                if (!productsResult.Success || productsResult.Data == null || productsResult.Data.Count == 0)
                {
                    logs.Add("‚ùå HATA: √úr√ºn bulunamadƒ±!");
                    ViewBag.Logs = logs;
                    return View();
                }

                var firstProduct = productsResult.Data[0];
                logs.Add($"‚úÖ √úr√ºn bulundu: {firstProduct.ProductCode} - {firstProduct.ProductName}");
                logs.Add("");

                // 2. √úr√ºn nesnesindeki g√∂rsel field'larƒ±nƒ± kontrol et
                logs.Add("üì∏ STEP 2: √úr√ºn nesnesindeki g√∂rsel field'larƒ±:");
                logs.Add("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
                logs.Add($"  ImageUrl: {firstProduct.ImageUrl ?? "NULL"}");
                logs.Add($"  ThumbnailUrl: {firstProduct.ThumbnailUrl ?? "NULL"}");
                logs.Add($"  Image: {firstProduct.Image ?? "NULL"}");
                logs.Add($"  HasImages: {firstProduct.HasImages ?? "NULL"}");
                logs.Add($"  Images Collection: {(firstProduct.Images?.Count > 0 ? $"{firstProduct.Images.Count} adet" : "NULL veya BO≈û")}");
                logs.Add("");

                // 3. GetProductImages API'sini test et
                logs.Add("üåê STEP 3: GetProductImages API'sini test ediyoruz...");
                logs.Add($"  ProductCode: {firstProduct.ProductCode}");
                logs.Add("");

                var imagesResult = await _tsoftService.GetProductImagesAsync(firstProduct.ProductCode ?? "");

                logs.Add($"  API Success: {imagesResult.Success}");
                logs.Add($"  Data Count: {imagesResult.Data?.Count ?? 0}");
                logs.Add("");

                if (imagesResult.Success && imagesResult.Data != null && imagesResult.Data.Count > 0)
                {
                    logs.Add("‚úÖ BA≈ûARILI! G√∂rseller geldi!");
                    logs.Add("");
                    logs.Add($"üìä TOPLAM {imagesResult.Data.Count} G√ñRSEL:");
                    logs.Add("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");

                    foreach (var img in imagesResult.Data.Take(3))
                    {
                        logs.Add("");
                        logs.Add($"üñºÔ∏è G√∂rsel #{imagesResult.Data.IndexOf(img) + 1}:");
                        logs.Add($"  ImageId: {img.ImageId ?? "NULL"}");
                        logs.Add($"  ImageUrl: {img.ImageUrl ?? "NULL"}");
                        logs.Add($"  ThumbnailUrl: {img.ThumbnailUrl ?? "NULL"}");
                        logs.Add($"  Image: {img.Image ?? "NULL"}");
                        logs.Add($"  Thumbnail: {img.Thumbnail ?? "NULL"}");
                        logs.Add($"  IsPrimary: {img.IsPrimary ?? "NULL"}");
                        logs.Add($"  IsMain: {img.IsMain ?? "NULL"}");
                        logs.Add($"  IsActive: {img.IsActive ?? "NULL"}");
                    }

                    logs.Add("");
                    logs.Add("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
                    logs.Add("");
                    logs.Add("üí° √á√ñZ√úM:");
                    logs.Add("  API g√∂rselleri d√∂nd√ºr√ºyor!");
                    logs.Add("  Sorun: ProductsMvcController'da GetEnhancedProductsAsync kullanƒ±lmƒ±yor olabilir");
                    logs.Add("  veya g√∂rseller y√ºklenirken hata oluyor.");
                    logs.Add("");
                    logs.Add("‚úÖ YAPILACAKLAR:");
                    logs.Add("  1. ProductsMvcController'ƒ±n GetEnhancedProductsAsync kullandƒ±ƒüƒ±ndan emin ol");
                    logs.Add("  2. G√∂rsel URL'lerinin doƒüru formatta olduƒüunu kontrol et");
                    logs.Add("  3. CORS sorunlarƒ± olabilir - tarayƒ±cƒ± konsoluna bak");

                    ViewBag.FirstImage = imagesResult.Data[0];
                }
                else if (imagesResult.Message != null && imagesResult.Message.Count > 0)
                {
                    logs.Add("‚ùå API HATASI:");
                    foreach (var msg in imagesResult.Message)
                    {
                        if (msg.Text != null)
                        {
                            foreach (var text in msg.Text)
                            {
                                logs.Add($"  {text}");
                            }
                        }
                    }
                    logs.Add("");
                    logs.Add("üí° NEDEN OLABILIR:");
                    logs.Add("  1. API yetki sorunu - g√∂rsel endpoint'i i√ßin yetki yok");
                    logs.Add("  2. √úr√ºn√ºn g√∂rseli yok");
                    logs.Add("  3. API endpoint yanlƒ±≈ü");
                    logs.Add("");
                    logs.Add("‚úÖ √á√ñZ√úM:");
                    logs.Add("  T-Soft API dok√ºmantasyonunu kontrol et");
                    logs.Add("  veya API saƒülayƒ±cƒ±sƒ±yla ileti≈üime ge√ß");
                }
                else
                {
                    logs.Add("‚ö†Ô∏è API √ßalƒ±≈ütƒ± ama veri yok");
                    logs.Add("  Bu √ºr√ºn√ºn g√∂rseli olmayabilir.");
                    logs.Add("");
                    logs.Add("üí° TEST ƒ∞√áƒ∞N:");
                    logs.Add("  Ba≈üka bir √ºr√ºn kodunu dene:");
                    logs.Add("  /ProductImageDebug/TestProduct?code=√úR√úN_KODU");
                }

                // 4. Full product JSON
                logs.Add("");
                logs.Add("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
                logs.Add("üìÑ TAM √úR√úN JSON (ilk 1000 karakter):");
                logs.Add("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
                var json = JsonSerializer.Serialize(firstProduct, new JsonSerializerOptions
                {
                    WriteIndented = true,
                    Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
                });
                ViewBag.ProductJson = json.Length > 1000 ? json.Substring(0, 1000) + "..." : json;

                ViewBag.Logs = logs;
            }
            catch (Exception ex)
            {
                logs.Add($"üí• EXCEPTION: {ex.Message}");
                logs.Add($"Stack: {ex.StackTrace}");
                ViewBag.Logs = logs;
            }

            return View();
        }

        [Route("ProductImageDebug/TestProduct")]
        public async Task<IActionResult> TestProduct(string code)
        {
            if (string.IsNullOrEmpty(code))
            {
                return Content("‚ùå √úr√ºn kodu gerekli! Kullanƒ±m: /ProductImageDebug/TestProduct?code=PROD001");
            }

            var imagesResult = await _tsoftService.GetProductImagesAsync(code);

            var result = new
            {
                productCode = code,
                success = imagesResult.Success,
                imageCount = imagesResult.Data?.Count ?? 0,
                images = imagesResult.Data,
                message = imagesResult.Message
            };

            return Json(result);
        }
    }
}