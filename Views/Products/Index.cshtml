@model List<Product>
@{
    ViewData["Title"] = "√úr√ºnler";

    string FormatPrice(string? price, string? currency = "TL")
    {
        if (string.IsNullOrEmpty(price)) return "‚Ç∫0,00";
        if (decimal.TryParse(price, System.Globalization.NumberStyles.Any,
            System.Globalization.CultureInfo.InvariantCulture, out var result))
        {
            var symbol = currency?.ToUpper() switch
            {
                "USD" => "$",
                "EUR" => "‚Ç¨",
                "GBP" => "¬£",
                _ => "‚Ç∫"
            };
            return $"{symbol}{result.ToString("N2", new System.Globalization.CultureInfo("tr-TR"))}";
        }
        return $"‚Ç∫{price}";
    }

    string GetImageUrl(Product product)
    {
        // √ñncelik sƒ±rasƒ±: ThumbnailUrl > ImageUrl > Image > Default
        if (!string.IsNullOrEmpty(product.ThumbnailUrl)) return product.ThumbnailUrl;
        if (!string.IsNullOrEmpty(product.ImageUrl)) return product.ImageUrl;
        if (!string.IsNullOrEmpty(product.Image)) return product.Image;
        if (product.Images != null && product.Images.Count > 0)
        {
            var img = product.Images[0];
            return img.ThumbnailUrl ?? img.Thumbnail ?? img.ImageUrl ?? img.Image ?? "";
        }
        return "";
    }
}

<!-- Stats Bar -->
<div class="stats-bar">
    <div class="stats-container" style="justify-content: center;">
        <div class="stat-mini">
            <div class="stat-icon purple">üì¶</div>
            <div class="stat-content">
                <div class="stat-label">Toplam √úr√ºn</div>
                <div class="stat-value-mini">@(ViewBag.TotalProducts ?? 0)</div>
            </div>
        </div>

        <div class="stat-mini">
            <div class="stat-icon green">‚úÖ</div>
            <div class="stat-content">
                <div class="stat-label">Aktif √úr√ºnler</div>
                <div class="stat-value-mini">@(ViewBag.ActiveProducts ?? 0)</div>
            </div>
        </div>

        <div class="stat-mini">
            <div class="stat-icon blue">üìä</div>
            <div class="stat-content">
                <div class="stat-label">Toplam Stok</div>
                <div class="stat-value-mini">@(ViewBag.TotalStock ?? 0)</div>
            </div>
        </div>

        <div class="stat-mini">
            <div class="stat-icon red">üí∞</div>
            <div class="stat-content">
                <div class="stat-label">Stok Deƒüeri</div>
                <div class="stat-value-mini">
                    @{
                        var totalValue = (decimal)(ViewBag.TotalValue ?? 0);
                        if (totalValue >= 1000000)
                        {
                            <text>‚Ç∫@((totalValue / 1000000m).ToString("N1"))M</text>
                        }
                        else if (totalValue >= 1000)
                        {
                            <text>‚Ç∫@((totalValue / 1000m).ToString("N0"))K</text>
                        }
                        else
                        {
                            <text>‚Ç∫@totalValue.ToString("N0")</text>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Main Container -->
<div class="page-container">
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">
            ‚úÖ @TempData["Success"]
        </div>
    }

    @if (!string.IsNullOrEmpty(ViewBag.Error))
    {
        <div class="alert alert-danger">
            ‚ùå @ViewBag.Error
        </div>
    }

    <div class="section-header">
        <h1 class="section-title">üì¶ √úr√ºn Y√∂netimi</h1>
        <div class="section-actions">
            <button class="btn btn-secondary" onclick="exportToExcel()">
                üì• Excel'e Aktar
            </button>
            <a href="/Products/Create" class="btn btn-primary">
                ‚ûï Yeni √úr√ºn Ekle
            </a>
        </div>
    </div>

    <!-- Geli≈ümi≈ü Filtreler -->
    <div class="cards-container" style="margin-bottom: 24px;">
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px; margin-bottom: 16px;">

            <div class="form-group" style="margin-bottom: 0;">
                <label class="form-label">üîç √úr√ºn Ara</label>
                <input type="search" id="searchInput" class="form-control"
                       placeholder="Kod, ad, marka..." onkeyup="applyFilters()">
            </div>

            <div class="form-group" style="margin-bottom: 0;">
                <label class="form-label">üìÅ Kategori</label>
                <select id="categoryFilter" class="form-select" onchange="applyFilters()">
                    <option value="">T√ºm Kategoriler</option>
                    @foreach (var category in (List<Category>)(ViewBag.Categories ?? new List<Category>()))
                    {
                        <option value="@category.CategoryCode">
                            @(category.Path ?? category.CategoryName ?? category.CategoryCode)
                        </option>
                    }
                </select>
            </div>

            <div class="form-group" style="margin-bottom: 0;">
                <label class="form-label">üè∑Ô∏è Marka</label>
                <select id="brandFilter" class="form-select" onchange="applyFilters()">
                    <option value="">T√ºm Markalar</option>
                    @foreach (var brand in (List<string>)(ViewBag.Brands ?? new List<string>()))
                    {
                        <option value="@brand">@brand</option>
                    }
                </select>
            </div>

            <div class="form-group" style="margin-bottom: 0;">
                <label class="form-label">üìä Durum</label>
                <select id="statusFilter" class="form-select" onchange="applyFilters()">
                    <option value="">T√ºm√º</option>
                    <option value="active">Aktif</option>
                    <option value="passive">Pasif</option>
                </select>
            </div>

            <div class="form-group" style="margin-bottom: 0;">
                <label class="form-label">üí∞ Fiyat Aralƒ±ƒüƒ±</label>
                <select id="priceFilter" class="form-select" onchange="applyFilters()">
                    <option value="">T√ºm√º</option>
                    <option value="0-100">0-100 TL</option>
                    <option value="100-500">100-500 TL</option>
                    <option value="500-1000">500-1.000 TL</option>
                    <option value="1000-5000">1.000-5.000 TL</option>
                    <option value="5000+">5.000+ TL</option>
                </select>
            </div>

            <div class="form-group" style="margin-bottom: 0;">
                <label class="form-label">üì¶ Stok Durumu</label>
                <select id="stockFilter" class="form-select" onchange="applyFilters()">
                    <option value="">T√ºm√º</option>
                    <option value="out">T√ºkendi (0)</option>
                    <option value="low">D√º≈ü√ºk (1-10)</option>
                    <option value="medium">Orta (11-50)</option>
                    <option value="high">Y√ºksek (50+)</option>
                </select>
            </div>
        </div>

        <div style="display: flex; gap: 8px; flex-wrap: wrap;">
            <button class="btn btn-secondary" onclick="resetFilters()">
                üîÑ Filtreleri Temizle
            </button>
            <button class="btn btn-secondary" onclick="toggleView('table')" id="tableViewBtn">
                ‚ò∞ Liste G√∂r√ºn√ºm√º
            </button>
            <button class="btn btn-secondary" onclick="toggleView('grid')" id="gridViewBtn">
                ‚äû Kart G√∂r√ºn√ºm√º
            </button>
            <span id="filterInfo" style="margin-left: auto; padding: 10px 0; color: var(--text-secondary); font-size: 14px;">
                @Model.Count √ºr√ºn g√∂steriliyor
            </span>
        </div>
    </div>

    @if (Model.Count > 0)
    {
        <!-- TABLO G√ñR√úN√úM√ú (Varsayƒ±lan) -->
        <div id="tableView" class="table-container">
            <table class="table product-table">
                <thead>
                    <tr>
                        <th style="width: 80px; text-align: center;">G√∂rsel</th>
                        <th style="min-width: 120px;">√úr√ºn Kodu</th>
                        <th style="min-width: 200px;">√úr√ºn Adƒ±</th>
                        <th style="min-width: 100px; text-align: center;">Stok</th>
                        <th style="text-align: center;">Durum</th>
                        <th style="min-width: 120px; text-align: right;">Satƒ±≈ü Fiyatƒ±</th>
                        <th style="min-width: 180px;">Kategori</th>
                        <th style="min-width: 100px;">Marka</th>
                        <th style="min-width: 120px; text-align: center;">Son G√ºncelleme</th>
                    </tr>
                </thead>
                <tbody id="productTableBody">
                    @foreach (var product in Model)
                    {
                        <tr class="product-row"
                            data-code="@(product.ProductCode?.ToLower())"
                            data-name="@(product.ProductName?.ToLower())"
                            data-category="@(product.DefaultCategoryCode?.ToLower())"
                            data-brand="@(product.Brand?.ToLower())"
                            data-status="@(product.IsActive == "1" ? "active" : "passive")"
                            data-price="@(decimal.TryParse(product.SellingPrice ?? product.Price, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out var p) ? p : 0)"
                            data-stock="@(int.TryParse(product.Stock, out var s) ? s : 0)">

                            <!-- G√∂rsel -->
                            <td style="text-align: center; padding: 8px;">
                                @{
                                    var imageUrl = GetImageUrl(product);
                                }
                                @if (!string.IsNullOrEmpty(imageUrl))
                                {
                                    <img src="@imageUrl"
                                         alt="@product.ProductName"
                                         style="width: 60px; height: 60px; object-fit: cover; border-radius: 8px; border: 1px solid var(--border);"
                                         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                                    <div style="display: none; width: 60px; height: 60px; background: var(--bg-main); border-radius: 8px; align-items: center; justify-content: center; font-size: 24px;">
                                        üì¶
                                    </div>
                                }
                                else
                                {
                                    <div style="width: 60px; height: 60px; background: var(--bg-main); border-radius: 8px; display: flex; align-items: center; justify-content: center; font-size: 24px;">
                                        üì¶
                                    </div>
                                }
                            </td>

                            <!-- √úr√ºn Kodu -->
                            <td>
                                <span class="badge badge-info" style="font-size: 13px; padding: 6px 12px;">
                                    @product.ProductCode
                                </span>
                            </td>

                            <!-- √úr√ºn Adƒ± -->
                            <td>
                                <strong style="font-size: 14px; font-weight: 600; color: var(--text-primary);">
                                    @product.ProductName
                                </strong>
                                @if (!string.IsNullOrEmpty(product.ShortDescription))
                                {
                                    <br />
                                    <small style="color: var(--text-secondary); font-size: 12px;">
                                        @(product.ShortDescription.Length > 60 ? product.ShortDescription.Substring(0, 60) + "..." : product.ShortDescription)
                                    </small>
                                }
                            </td>

                            <!-- Stok -->
                            <td style="text-align: center;">
                                @{
                                    var stock = int.TryParse(product.Stock, out var stockVal) ? stockVal : 0;
                                    var stockClass = stock == 0 ? "badge-danger" : stock <= 10 ? "badge-warning" : stock <= 50 ? "badge-info" : "badge-success";
                                }
                                <span class="badge @stockClass" style="font-size: 15px; font-weight: 700; padding: 8px 14px;">
                                    @stock @(product.StockUnit ?? "adet")
                                </span>
                            </td>

                            <!-- Durum -->
                            <td style="text-align: center;">
                                @if (product.IsActive == "1")
                                {
                                    <span class="badge badge-success" style="font-size: 13px; padding: 6px 12px;">‚úÖ Aktif</span>
                                }
                                else
                                {
                                    <span class="badge badge-danger" style="font-size: 13px; padding: 6px 12px;">‚ùå Pasif</span>
                                }
                            </td>

                            <!-- Satƒ±≈ü Fiyatƒ± -->
                            <td style="text-align: right;">
                                <strong style="color: var(--success); font-size: 16px; font-weight: 700;">
                                    @FormatPrice(product.SellingPrice ?? product.Price, product.Currency)
                                </strong>
                                @if (!string.IsNullOrEmpty(product.BuyingPrice))
                                {
                                    <br />
                                    <small style="color: var(--text-secondary); font-size: 12px;">
                                        Alƒ±≈ü: @FormatPrice(product.BuyingPrice, product.Currency)
                                    </small>
                                }
                            </td>

                            <!-- Kategori -->
                            <td>
                                @if (product.CategoryPath != null && product.CategoryPath.Count > 0)
                                {
                                    <span style="font-size: 13px; color: var(--text-secondary);">
                                        @string.Join(" ‚Ä∫ ", product.CategoryPath)
                                    </span>
                                }
                                else if (!string.IsNullOrEmpty(product.CategoryName))
                                {
                                    <span style="font-size: 13px; color: var(--text-secondary);">
                                        @product.CategoryName
                                    </span>
                                }
                                else if (!string.IsNullOrEmpty(product.DefaultCategoryCode))
                                {
                                    <span class="badge badge-secondary" style="font-size: 12px;">
                                        @product.DefaultCategoryCode
                                    </span>
                                }
                                else
                                {
                                    <span style="color: var(--text-secondary); font-size: 13px;">-</span>
                                }
                            </td>

                            <!-- Marka -->
                            <td>
                                @if (!string.IsNullOrEmpty(product.Brand))
                                {
                                    <span class="badge badge-secondary" style="font-size: 12px; padding: 5px 10px;">
                                        @product.Brand
                                    </span>
                                }
                                else
                                {
                                    <span style="color: var(--text-secondary); font-size: 13px;">-</span>
                                }
                            </td>

                            <!-- Son G√ºncelleme -->
                            <td style="text-align: center;">
                                @{
                                    var updateDate = product.UpdateDate ?? product.UpdateDateTimeStamp ?? product.LastModified;
                                }
                                @if (!string.IsNullOrEmpty(updateDate))
                                {
                                    if (DateTime.TryParse(updateDate, out var dt))
                                    {
                                        <span style="font-size: 13px; font-weight: 600;">@dt.ToString("dd.MM.yyyy")</span>
                                        <br />
                                        <small style="color: var(--text-secondary); font-size: 12px;">@dt.ToString("HH:mm")</small>
                                    }
                                    else
                                    {
                                        <span style="font-size: 13px;">@updateDate</span>
                                    }
                                }
                                else
                                {
                                    <span style="color: var(--text-secondary); font-size: 13px;">-</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- KART G√ñR√úN√úM√ú -->
        <div id="gridView" style="display: none;">
            <div class="product-grid" id="productGrid">
                @foreach (var product in Model)
                {
                    <div class="product-card-enhanced"
                         data-code="@(product.ProductCode?.ToLower())"
                         data-name="@(product.ProductName?.ToLower())"
                         data-category="@(product.DefaultCategoryCode?.ToLower())"
                         data-brand="@(product.Brand?.ToLower())"
                         data-status="@(product.IsActive == "1" ? "active" : "passive")"
                         data-price="@(decimal.TryParse(product.SellingPrice ?? product.Price, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out var p2) ? p2 : 0)"
                         data-stock="@(int.TryParse(product.Stock, out var s2) ? s2 : 0)">

                        @{
                            var cardImageUrl = GetImageUrl(product);
                        }

                        <!-- √úr√ºn G√∂rseli -->
                        <div class="product-card-image">
                            @if (!string.IsNullOrEmpty(cardImageUrl))
                            {
                                <img src="@cardImageUrl" alt="@product.ProductName"
                                     onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                                <div style="display: none; width: 100%; height: 100%; background: var(--bg-main); align-items: center; justify-content: center; font-size: 48px;">
                                    üì¶
                                </div>
                            }
                            else
                            {
                                <div style="width: 100%; height: 100%; background: var(--bg-main); display: flex; align-items: center; justify-content: center; font-size: 48px;">
                                    üì¶
                                </div>
                            }

                            <!-- Durum Badge -->
                            <div style="position: absolute; top: 12px; right: 12px;">
                                @if (product.IsActive == "1")
                                {
                                    <span class="badge badge-success" style="font-size: 11px; padding: 4px 8px;">‚úÖ Aktif</span>
                                }
                                else
                                {
                                    <span class="badge badge-danger" style="font-size: 11px; padding: 4px 8px;">‚ùå Pasif</span>
                                }
                            </div>
                        </div>

                        <!-- √úr√ºn Bilgileri -->
                        <div class="product-card-body">
                            <div class="product-code" style="font-size: 11px; color: var(--primary); font-weight: 600; margin-bottom: 8px;">
                                @product.ProductCode
                            </div>

                            <h3 class="product-name" style="font-size: 15px; font-weight: 600; margin-bottom: 12px; line-height: 1.4; min-height: 42px;">
                                @product.ProductName
                            </h3>

                            <div style="display: flex; flex-direction: column; gap: 8px; margin-bottom: 16px;">
                                @if (!string.IsNullOrEmpty(product.CategoryName))
                                {
                                    <div style="font-size: 12px; color: var(--text-secondary);">
                                        üìÅ @product.CategoryName
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(product.Brand))
                                {
                                    <div style="font-size: 12px; color: var(--text-secondary);">
                                        üè∑Ô∏è @product.Brand
                                    </div>
                                }
                            </div>

                            <!-- Fiyat ve Stok -->
                            <div style="display: flex; justify-content: space-between; align-items: center; padding-top: 16px; border-top: 1px solid var(--border);">
                                <div>
                                    <div style="font-size: 20px; font-weight: 700; color: var(--success);">
                                        @FormatPrice(product.SellingPrice ?? product.Price, product.Currency)
                                    </div>
                                </div>
                                <div style="text-align: right;">
                                    @{
                                        var cardStock = int.TryParse(product.Stock, out var cardStockVal) ? cardStockVal : 0;
                                        var cardStockClass = cardStock == 0 ? "badge-danger" : cardStock <= 10 ? "badge-warning" : "badge-success";
                                    }
                                    <span class="badge @cardStockClass" style="font-size: 13px; padding: 6px 10px;">
                                        üì¶ @cardStock
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Pagination -->
        @if (ViewBag.HasMore == true)
        {
            <div style="margin-top: 32px; text-align: center;">
                <a href="/Products?page=@(ViewBag.CurrentPage + 1)&limit=@ViewBag.PageSize" class="btn btn-primary">
                    Daha Fazla Y√ºkle
                </a>
            </div>
        }
    }
    else
    {
        <div class="cards-container">
            <div class="empty-state">
                <div style="font-size: 64px; margin-bottom: 16px;">üì¶</div>
                <h3>Hen√ºz √ºr√ºn bulunmuyor</h3>
                <p style="color: var(--text-secondary);">ƒ∞lk √ºr√ºn√º ekleyerek ba≈ülayƒ±n</p>
                <a href="/Products/Create" class="btn btn-primary" style="margin-top: 16px;">
                    ‚ûï √úr√ºn Ekle
                </a>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        let allRows = [];
        let allCards = [];
        let currentView = 'table';

        document.addEventListener('DOMContentLoaded', function() {
            allRows = Array.from(document.querySelectorAll('.product-row'));
            allCards = Array.from(document.querySelectorAll('.product-card-enhanced'));

            // Varsayƒ±lan g√∂r√ºn√ºm: tablo
            toggleView('table');
        });

        function applyFilters() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const categoryFilter = document.getElementById('categoryFilter').value.toLowerCase();
            const brandFilter = document.getElementById('brandFilter').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value;
            const priceFilter = document.getElementById('priceFilter').value;
            const stockFilter = document.getElementById('stockFilter').value;

            let visibleCount = 0;
            const items = currentView === 'table' ? allRows : allCards;

            items.forEach(item => {
                const code = item.getAttribute('data-code') || '';
                const name = item.getAttribute('data-name') || '';
                const category = item.getAttribute('data-category') || '';
                const brand = item.getAttribute('data-brand') || '';
                const status = item.getAttribute('data-status') || '';
                const price = parseFloat(item.getAttribute('data-price')) || 0;
                const stock = parseInt(item.getAttribute('data-stock')) || 0;

                let show = true;

                // Search filter
                if (searchTerm && !code.includes(searchTerm) && !name.includes(searchTerm) && !brand.includes(searchTerm)) {
                    show = false;
                }

                // Category filter
                if (categoryFilter && category !== categoryFilter) {
                    show = false;
                }

                // Brand filter
                if (brandFilter && brand !== brandFilter) {
                    show = false;
                }

                // Status filter
                if (statusFilter && status !== statusFilter) {
                    show = false;
                }

                // Price filter
                if (priceFilter) {
                    if (priceFilter === '0-100' && (price < 0 || price > 100)) show = false;
                    if (priceFilter === '100-500' && (price < 100 || price > 500)) show = false;
                    if (priceFilter === '500-1000' && (price < 500 || price > 1000)) show = false;
                    if (priceFilter === '1000-5000' && (price < 1000 || price > 5000)) show = false;
                    if (priceFilter === '5000+' && price < 5000) show = false;
                }

                // Stock filter
                if (stockFilter) {
                    if (stockFilter === 'out' && stock !== 0) show = false;
                    if (stockFilter === 'low' && (stock === 0 || stock > 10)) show = false;
                    if (stockFilter === 'medium' && (stock < 11 || stock > 50)) show = false;
                    if (stockFilter === 'high' && stock <= 50) show = false;
                }

                item.style.display = show ? '' : 'none';
                if (show) visibleCount++;
            });

            document.getElementById('filterInfo').textContent =
                `${visibleCount} √ºr√ºn g√∂steriliyor (toplam ${items.length})`;
        }

        function resetFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('categoryFilter').value = '';
            document.getElementById('brandFilter').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('priceFilter').value = '';
            document.getElementById('stockFilter').value = '';
            applyFilters();
        }

        function toggleView(view) {
            currentView = view;
            const tableView = document.getElementById('tableView');
            const gridView = document.getElementById('gridView');
            const tableBtn = document.getElementById('tableViewBtn');
            const gridBtn = document.getElementById('gridViewBtn');

            if (view === 'table') {
                tableView.style.display = '';
                gridView.style.display = 'none';
                tableBtn.classList.remove('btn-secondary');
                tableBtn.classList.add('btn-primary');
                gridBtn.classList.remove('btn-primary');
                gridBtn.classList.add('btn-secondary');
            } else {
                tableView.style.display = 'none';
                gridView.style.display = '';
                gridBtn.classList.remove('btn-secondary');
                gridBtn.classList.add('btn-primary');
                tableBtn.classList.remove('btn-primary');
                tableBtn.classList.add('btn-secondary');
            }

            applyFilters();
        }

        function exportToExcel() {
            const visibleRows = allRows.filter(row => row.style.display !== 'none');

            let csv = '√úr√ºn Kodu,√úr√ºn Adƒ±,Stok,Durum,Satƒ±≈ü Fiyatƒ±,Kategori,Marka,Son G√ºncelleme\n';

            visibleRows.forEach(row => {
                const cells = row.querySelectorAll('td');
                const code = cells[1].textContent.trim();
                const name = cells[2].querySelector('strong').textContent.trim();
                const stock = cells[3].textContent.trim();
                const status = cells[4].textContent.trim();
                const price = cells[5].querySelector('strong').textContent.trim();
                const category = cells[6].textContent.trim();
                const brand = cells[7].textContent.trim();
                const update = cells[8].textContent.trim().replace(/\n/g, ' ');

                csv += `"${code}","${name}","${stock}","${status}","${price}","${category}","${brand}","${update}"\n`;
            });

            // Download
            const blob = new Blob(['\ufeff' + csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `urunler_${new Date().toISOString().split('T')[0]}.csv`;
            link.click();
        }
    </script>
}

<style>
    .product-card-image {
        width: 100%;
        height: 220px;
        overflow: hidden;
        border-radius: 12px 12px 0 0;
        position: relative;
        background: var(--bg-main);
    }

        .product-card-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

    .product-card-enhanced:hover .product-card-image img {
        transform: scale(1.05);
    }

    .product-card-body {
        padding: 20px;
    }

    .product-card-enhanced {
        background: var(--bg-card);
        border: 1px solid var(--border);
        border-radius: 12px;
        overflow: hidden;
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .product-card-enhanced:hover {
            transform: translateY(-4px);
            border-color: var(--primary);
            box-shadow: 0 12px 24px rgba(124, 58, 237, 0.2);
        }

    .product-table tbody tr {
        transition: all 0.2s ease;
    }

        .product-table tbody tr:hover {
            background: var(--bg-hover);
            transform: translateX(4px);
        }
</style>
